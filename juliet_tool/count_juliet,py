import os
import os.path
import sys

path = sys.argv[1]

external_function = []

result_dir = "/home/klee/experiment/Juliet/result/"

external_log = result_dir + "external_err.log"
external_unknown_log = result_dir + "external_unknow.log"
ptr_err_log = result_dir + "ptr_err.log"
div_0_log = result_dir + "div_0.log"
free_log = result_dir + "free_error.log"
abort_log = result_dir + "abort_fail.log"
con_sym_size_log =  result_dir + "con_sym_size.log"
assert_log = result_dir + "assert_fail.log"
exec_err_log = result_dir + "exec_err.log"
unknown_err_log = result_dir + "unknown_err.log"
find_nothing = result_dir + "find_nothing.log"
ex_function_log = result_dir + "external_function_list.log"




f = open(external_log, 'w')
f.write("klee-out path,     target path,     external function name\n")
f.close()

f = open(external_unknown_log, 'w')
f.write("klee-out path,     target path,     reason for external call\n")
f.close()

f = open(ptr_err_log, 'w')
f.write("klee-out path,     target path\n")
f.close()

f = open(div_0_log, 'w')
f.write("klee-out path,     target path\n")
f.close()

f = open(free_log, 'w')
f.write("klee-out path,     target path\n")
f.close()

f = open(abort_log, 'w')
f.write("klee-out path,     target path\n")
f.close()

f = open(con_sym_size_log, 'w')
f.write("klee-out path,     target path\n")
f.close()

f = open(assert_log, 'w')
f.write("klee-out path,     target path\n")
f.close()

f = open(exec_err_log, 'w')
f.write("klee-out path,     target path,     reason for executed error\n")
f.close()

f = open(unknown_err_log, 'w')
f.write("klee-out path,     target path,     reason for error\n")
f.close()

f = open(find_nothing, 'w')
f.write("klee-out path,     target path\n")
f.close()

f = open(ex_function_log, 'w')
f.write("-------  external function name -----------\n")
f.close()


for dirpath, dirnames, filenames in os.walk(path):
    print(dirpath)
    if "klee-out" in dirpath:
        f = open(dirpath+"/info", "r")
        s = f.read()
        f.close()
        string = "/home/klee/experiment/Juliet/testcases/"
        a = s.find(string)
        b = s.find("--sym-stdin")

        if a == -1:
            continue
        
        if s[a+len(string)] == "/":
            a += 1
        target_name = s[a+len(string) : b-1]

        error_flag = 0

        for fname in filenames:

            if not fname.endswith(".err"):
                continue
            if fname.endswith('ptr.err'):
                f = open(ptr_err_log, 'a')
                f.write(dirpath + ",    " + target_name + "\n")
                f.close()
                error_flag += 1  

            elif fname.endswith('external.err'):
                f = open(dirpath+"/"+fname, 'r')
                s = f.readline()
                f.close()
                error_flag += 1

                if "Error: failed external call: " in s:
                    if s[29:-1] not in external_function:
                        external_function.append(s[29:-1])
                    f = open(external_log, 'a')
                    f.write(dirpath + ",    " + target_name + ",    " + s[29:-1] + "\n")
                    f.close()

                else:
                    f = open(external_unknown_log, 'a')
                    f.write(dirpath + ",    " + target_name + ",    " + s + "\n")
                    f.close()
                

            elif fname.endswith('exec.err'): 
                f = open(dirpath+"/"+fname, 'r')
                s = f.readline()
                f.close()

                f = open(exec_err_log, 'a')
                f.write(dirpath + ",    " + target_name + ",    " + s + "\n")
                f.close()
                error_flag += 1


            elif fname.endswith('model.err'):
                f = open(dirpath+"/"+fname, 'r')
                s = f.readline()
                f.close()
                
                f = open(con_sym_size_log, 'a')
                f.write(dirpath + ",    " + target_name + ",    " + s + "\n")
                f.close()
                error_flag += 1

            elif fname.endswith('div.err'):
                f = open(dirpath+"/"+fname, 'r')
                s = f.readline()
                f.close()

                f = open(div_0_log, 'a')
                f.write(dirpath + ",    " + target_name + ",    " + s + "\n")
                f.close()
                error_flag += 1

            elif fname.endswith('free.err'):
                f = open(dirpath+"/"+fname, 'r')
                s = f.readline()
                f.close()

                f = open(free_log, 'a')
                f.write(dirpath + ",    " + target_name + ",    " + s + "\n")
                f.close()
                error_flag += 1

            elif fname.endswith('assert.err'):
                f = open(dirpath+"/"+fname, 'r')
                s = f.readline()
                f.close()
                
                f = open(assert_log, 'a')
                f.write(dirpath + ",    " + target_name + ",    " + s + "\n")
                f.close()
                error_flag += 1

            elif fname.endswith('abort.err'):
                f = open(dirpath+"/"+fname, 'r')
                s = f.readline()
                f.close()
                
                f = open(abort_log, 'a')
                f.write(dirpath + ",    " + target_name + ",    " + s + "\n")
                f.close()
                error_flag += 1


            elif fname.endswith('.err'):
                f = open(dirpath+"/"+fname, 'r')
                s = f.readline()
                f.close()

                f = open(unknown_err_log, 'a')
                f.write(dirpath + ",    " + target_name + ",    " + s + "\n")
                f.close()
                error_flag += 1


        if error_flag == 0:
            f = open(find_nothing, 'a')
            f.write(dirpath + ",    " + target_name + "\n")
            f.close()


print(external_function)                            
f = open(ex_function_log, 'a')
f.write(str(external_function))
f.close()

